#include <ArduinoJson.h> // Inclua a biblioteca ArduinoJson

#include <FastLED.h>

#include <WiFiClient.h>
#include <Espalexa.h>

String actualColor = "#ffffff";

#include "WiFiConnection.h"  // Inclui o cabeçalho da conexão WiFi
#include "API.h"
#include "LEDMatrix.h"
#include "Draw.h"
#include "MyClock.h"
#include "Effects.h"

// Arduino setup function
void setup() {
    Serial.begin(115200);
    FastLED.addLeds<WS2811, 2, RGB>(leds, NUM_LEDS);
    FastLED.setBrightness(20);
    resetFalled();
    setTime();
}

int x = 6;
int y = 2;

void drawClock() {

    if (bool_get_hour) {
      int hour1 = hours / 10;      // Primeiro dígito da hora
      int hour2 = hours % 10;      // Segundo dígito da hora

      int minute1 = minutes / 10;  // Primeiro dígito dos minutos
      int minute2 = minutes % 10;  // Segundo dígito dos minutos

      int second1 = seconds / 10;  // Primeiro dígito dos segundos
      int second2 = seconds % 10;  // Segundo dígito dos segundos

      // Exibindo os valores
      Serial.println("");
      Serial.print(hour1);
      Serial.print(hour2);
      Serial.print(":");
      Serial.print(minute1);
      Serial.print(minute2);
      Serial.print(":");
      Serial.print(second1);
      Serial.print(second2);

      drawNumber(hour1,0+x,y);
      drawNumber(hour2,4+x,y);
      drawNumber(10,8+x,y);
      drawNumber(minute1,12+x,y);
      drawNumber(minute2,16+x,y);
      //drawNumber(10,20+x,y);
      //drawNumber(second1,24+x,y);
      //drawNumber(second2,28+x,y);

    }

    if (minutes % 5==0) {
      resetFalled();
    }

    actualColor=randColor(); //muda a cor a cada 1 segundo
}


unsigned long previousMillis = 0;
const long interval = 1000;

int ledMatrix[32][32] = {
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};


int matrixOne[16][16] = {
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

void drawMatrix() {
  // Percorre a matriz
  for (int x = 1; x < 32; x++) {
    for (int y = 1; y < 32; y++) {
      // Desenha o pixel se o valor na matriz for 1
      if (ledMatrix[y-1][x-1] == 1) {
        pixel(x, y, "#ffffff"); // Ajusta a posição para centralizar
      }
    }
  }
}

bool bool_y=true;

// Defina o número de linhas e colunas do quadro
#define MAX_X 32
#define MAX_Y 32

void drawJson(String json) {
    Serial.println("Carregando imagem json");

    // Criando um objeto para armazenar o JSON
    StaticJsonDocument<2048> doc;

    // Parse do JSON recebido
    DeserializationError error = deserializeJson(doc, json);

    if (error) {
        Serial.print("Falha ao analisar o JSON: ");
        Serial.println(error.f_str());
        return;
    }

    // Obtendo o objeto 'colors' do JSON
    JsonObject colors = doc["colors"];

    // Obtendo o array de 'coordinates' do JSON
    JsonArray coordinates = doc["coordinates"];

    // Iterando sobre as coordenadas
    for (int i = 0; i < coordinates.size(); i++) {
        JsonArray coordinate = coordinates[i]; // Pegando cada array de coordenadas

        // Iterando sobre os valores de cada coordenada
        for (int j = 0; j < coordinate.size(); j++) {
            int coord = coordinate[j]; // Obtendo o índice da cor

            // Verificando se a coordenada existe no objeto 'colors'
            if (colors.containsKey(String(coord))) {
                String color = colors[String(coord)]; // Pegando a cor associada ao índice

                // Definindo a posição X e Y
                int x = (j % MAX_X); // Ajuste conforme sua necessidade
                int y = (j / MAX_X); // Ajuste conforme sua necessidade
                
                // Desenhando o pixel com a cor
                pixel(x, y, "#" + color);
            }
        }
    }
}


void loopx() {
    all("#000000");
    String json = R"({"colors":{"0":"242129","1":"362f37","2":"141822","3":"3d4656","4":"000000","5":"5c606e","6":"253346","7":"130c12","8":"896864","9":"95969c","10":"0c0f17","11":"17283b","12":"141e2d","13":"07070b","14":"000002","15":"290a0e","16":"030102","17":"010207","18":"03040a","19":"d4ac87","20":"000105","21":"070f1b","22":"03060e","23":"0c0509","24":"030812","25":"040c18","26":"7f2a2e","27":"01050c","28":"0a1726","29":"e5dec4","30":"465d76"},"coordinates":[[4,4,4,4,4,4,2,4,4,4,4,4,4,18,4,4,4,4,17,22,20,4,20,18,10,10,4,4,4,17,6,2],[4,21,4,20,4,17,4,14,4,4,4,17,10,4,23,2,12,2,2,2,2,2,0,0,0,0,4,14,16,4,21,6],[4,12,11,14,4,4,14,18,4,4,24,24,16,2,6,1,3,3,6,1,10,2,2,0,0,1,4,12,4,11,22,21],[4,14,4,21,13,4,24,4,27,18,4,12,0,10,1,12,1,1,1,3,3,0,2,2,0,1,10,4,10,16,25,22],[0,11,4,4,4,11,4,25,22,17,14,7,12,2,2,11,1,3,3,3,0,1,3,2,1,0,1,17,16,4,24,25],[1,1,6,4,2,4,2,4,10,10,4,11,2,2,10,2,6,3,3,3,1,0,1,1,0,1,1,4,7,4,4,27],[1,13,0,0,28,18,2,2,16,4,18,11,8,8,8,8,3,1,3,5,0,0,0,3,1,0,0,3,4,4,27,17],[2,0,4,13,0,1,24,14,4,16,12,8,9,9,8,5,5,3,1,1,1,2,2,1,1,0,0,1,1,20,12,18],[4,0,1,13,4,0,0,1,13,2,8,8,9,9,9,5,5,5,1,3,0,7,0,2,2,10,2,0,5,13,18,18],[0,7,13,0,0,16,0,7,0,2,5,9,9,9,9,9,8,8,3,1,0,2,0,2,2,2,2,0,0,3,14,17],[7,7,7,4,16,7,7,7,0,1,8,9,9,9,9,9,8,8,3,1,1,0,0,2,0,0,0,2,0,9,1,17],[4,2,7,2,4,7,23,16,0,5,8,9,9,9,9,9,3,7,0,0,0,0,1,7,0,2,0,0,3,3,5,4],[4,4,4,12,7,7,23,7,4,1,0,2,5,5,1,1,2,7,0,1,0,2,1,7,7,0,0,0,0,0,8,15],[4,17,4,14,25,7,7,13,4,5,0,2,1,9,1,2,16,3,21,10,0,7,1,0,13,2,7,2,1,1,8,1],[4,4,4,14,4,4,2,4,4,0,5,10,0,8,3,5,5,3,3,3,0,7,0,0,7,2,0,0,2,0,3,9],[17,20,4,14,4,4,4,4,4,1,0,8,9,5,5,5,9,8,5,5,0,2,0,7,0,2,0,1,0,1,3,19],[16,14,22,20,14,14,14,16,4,5,5,5,19,5,3,5,9,8,5,3,2,2,0,7,0,1,0,1,1,1,0,8],[13,13,13,18,13,13,13,13,7,5,5,8,1,7,1,1,5,5,5,3,2,7,0,7,0,0,2,0,3,3,26,19],[10,10,10,10,10,10,10,13,7,5,5,5,2,0,0,8,5,5,5,1,2,0,0,2,2,2,7,0,5,0,0,29],[2,2,12,2,2,10,10,10,0,1,3,5,8,5,5,5,5,5,3,1,7,2,0,7,0,0,0,1,5,3,1,8],[12,0,1,0,1,0,0,0,0,7,5,5,15,0,0,23,0,3,1,1,7,7,0,2,15,0,0,8,19,19,8,19],[0,1,1,1,1,1,6,1,7,0,5,5,8,8,8,3,3,5,1,1,0,0,0,15,15,0,2,3,19,26,0,1],[3,3,3,6,3,3,3,3,7,0,0,5,3,0,1,3,5,3,1,1,0,0,15,15,7,0,0,1,1,3,1,2],[3,3,3,3,1,3,3,3,13,3,2,5,9,9,8,8,5,3,1,1,1,1,0,0,0,2,1,1,26,26,0,23],[3,3,3,3,3,3,3,3,3,5,1,1,5,5,5,5,1,1,1,1,15,1,1,15,1,0,0,8,0,1,4,4],[3,6,6,6,6,6,3,3,3,1,3,1,2,1,1,1,0,15,15,15,0,0,1,1,8,15,8,1,3,10,10,10],[12,11,11,6,6,6,6,3,3,6,11,6,3,1,2,0,0,0,0,1,0,0,1,1,9,1,0,2,10,10,10,10],[12,12,11,11,11,6,6,6,6,6,11,6,11,11,8,0,0,1,1,1,7,0,0,0,1,2,0,2,2,21,10,10],[11,11,11,11,11,11,11,11,11,6,6,6,6,6,6,0,0,0,1,0,0,0,0,0,0,0,12,12,2,2,2,2],[5,3,6,6,6,6,3,3,6,6,6,6,6,6,6,12,2,0,0,0,2,2,0,0,1,0,2,12,12,6,6,12],[8,9,9,8,5,5,3,3,30,3,3,3,3,5,3,12,2,2,2,2,2,2,7,3,28,11,2,0,1,1,4,5],[9,9,9,5,5,5,5,5,5,5,5,5,5,5,5,6,2,2,2,2,2,10,0,1,11,13,8,5,5,5,8,19]]})";

    // Chamando a função draw com o JSON
    drawJson(json);

    FastLED.setBrightness(20);
    FastLED.show();
}

void loop() {

  all("#000000");
  for (int i = 0; i < 8; i++) {
    explode(i);
  }

  unsigned long currentMillis = millis();
  if (previousMillis == 0 || currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;
      // a cada 1 segundo
      
      if (x==0) {
        //x=1;
      } else {
        //x=0;
      }

      //y++;
      if (y>32-5) {
        //y=32-5;
      }


  }

  for (int i = 0; i < 5; i++) {
    pixel(random(1, 32), random(1, 32), randColor());
  }
  
  //fall();
  //pingPong();

  loopClock();
  drawClock();
  draw();

  FastLED.setBrightness(20);
  FastLED.show();

  //unsigned long currentMillis = millis();
  //if (previousMillis == 0 || currentMillis - previousMillis >= interval) {
  //    previousMillis = currentMillis;
  //    all("#000000");
  //    drawMatrix();
  //}
}